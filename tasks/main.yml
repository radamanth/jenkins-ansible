---

- debug: var=jenkins_domain

- name: Update apt
  apt: update_cache=yes

- name: Configure apt key for jenkins repository
  action: apt_key url=http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key state=present

- name: Add jenkins APT repository
  action: apt_repository repo='deb http://pkg.jenkins-ci.org/debian binary/' state=present

- name: Remove non-existing src apt repository
  action: apt_repository repo='deb-src http://pkg.jenkins-ci.org/debian binary/' state=absent

- name: Add old-python apt repository
  action: apt_repository repo=ppa:fkrull/deadsnakes state=present

- name: Install jenkins
  action: apt pkg={{item}} update_cache=yes force=yes state=latest
  with_items: 
  - "{{ jenkins_packages }}"

- name: Add Jenkins to group shadow !
  user: name={{item.name}}  comment='Added via ansible' generate_ssh_key=yes ssh_key_bits=2048 ssh_key_passphrase={{item.passphrase}}  groups={{item.groups}}  shell=/bin/bash state=present
  with_items:
   - {name: jenkins , groups: "shadow", passphrase: "{{ jenkins_default_passphrase }}"  }



- name: Disable Security for plugin update
  set_fact: jenkins_use_auth="false"

- debug: var=jenkins_use_auth

- name: Configure jenkins
  template: src={{item.src}} dest={{item.dest}}  owner=jenkins backup=yes
  with_items:
  - {src: config.xml.j2 , dest: /var/lib/jenkins/config.xml }
  - {src: jenkins.model.JenkinsLocationConfiguration.xml.j2 , dest: /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml }
  - {src: etc.default.jenkins.j2 , dest: /etc/default/jenkins }
  notify:
    - restart jenkins

- name: stop jenkins
  service: name=jenkins state=stopped

- name: reinit log file
  command: echo '' > /var/log/jenkins/jenkins.log


- name: Ensure var/lib/jenkins/updates exists 
  file: path=/var/lib/jenkins/updates owner=jenkins group=jenkins mode=0755 state=directory

# Get latest Jenkins update file
- name: Get Jenkins updates
  sudo: yes
  get_url: url={{jenkins_updates_url}} dest="{{ jenkins_updates_dest}}.tmp" thirsty=yes mode=0440 owner=jenkins group=jenkins backup=yes
  register: jenkins_updates

- debug: var=jenkins_updates

# Jenkins Update-center
- name: Update-center Jenkins
  sudo: yes
  shell: "cat {{ jenkins_updates_dest}}.tmp | sed '1d;$d' > {{ jenkins_updates_dest}}"
  when: jenkins_updates.changed
  notify: 
    - restart jenkins

- name: Restart jenkins
  service: name=jenkins state=restarted

- name: Touch logfile
  shell: cat /dev/null > /var/log/jenkins/jenkins.log

- name: Wait for Jenkins to  start
  wait_for: path=/var/log/jenkins/jenkins.log search_regex="{{ jenkins_start_phrase}}"


- name: List plugins
  sudo: yes
  action: shell java -jar {{ jenkins_client }} -s http://127.0.0.1:{{ jenkins_local_port}}/ list-plugins | cut -f 1 -d ' '
  when: jenkins_plugins is defined
  register: plugins_installed

# Install/update Jenkins plugins
- name: Install/update plugins
  sudo: yes
  action: command java -jar {{ jenkins_client }} -s http://127.0.0.1:{{ jenkins_local_port}}/ install-plugin {{ item }}
  when: "plugins_installed.changed and plugins_installed.stdout.find('{{ item }}') == -1"
  with_items: 
  - "{{ jenkins_plugins}}"
  notify:
    - "restart jenkins"

- name: List plugins to be updated
  sudo: yes
  action: shell java -jar {{ jenkins_client }}  -s http://127.0.0.1:{{ jenkins_local_port}}/ list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
  register: plugins_updates

- name: Update plugins
  sudo: yes
  action: command java -jar {{ jenkins_client }} -s http://127.0.0.1:{{ jenkins_local_port}}/ install-plugin {{ plugins_updates.stdout }}
  when: plugins_updates.stdout != ''
  notify:
    - restart jenkins

- name: Disable Security for plugin update
  set_fact: jenkins_use_auth="true"

- name: Configure jenkins
  template: src={{item.src}} dest={{item.dest}}  owner=jenkins backup=yes
  with_items:
  - {src: config.xml.j2 , dest: /var/lib/jenkins/config.xml }
  - {src: jenkins.model.JenkinsLocationConfiguration.xml.j2 , dest: /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml }
  - {src: etc.default.jenkins.j2 , dest: /etc/default/jenkins } 
  notify:
    - restart jenkins

- name: Restart jenkins
  service: name=jenkins state=restarted


# Enable and start apache
- name: Create apache2 ssl Directory
  file: path=/etc/apache2/ssl state=directory owner=root group=root mode=0755

- name: Create self-signed certificate.
  command: openssl req -new -nodes -x509 -subj "{{ jenkins_self_signed_cert_subj }}" -days 3650 -keyout /etc/apache2/ssl/jenkins.key -out /etc/apache2/ssl/jenkins.crt -extensions v3_ca
    creates=/etc/apache2/ssl/jenkins_key

- name: Templating apache2.vhost.conf
  template: src={{item.src}} dest={{item.dest}} backup=yes
  with_items:
  - {src: jenkins.conf , dest: '/etc/apache2/sites-available/jenkins.conf'}

- name: Enable mod for apache2
  command: a2enmod {{item}}
  with_items:
  - headers
  - proxy
  - proxy_http
  - ssl

- name: Disable default apache2 sites
  command: a2dissite {{item}} 
  with_items:
  - 000-default.conf
  - default-ssl.conf

- name: Enable jenkins Apache 2 site
  command: a2ensite jenkins.conf

- name: Restart apache
  service: name=apache2 state=restarted 

